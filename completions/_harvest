#compdef _harvest harvest


function _harvest {
  local -a commands

  _arguments -C \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    '(-v --version)'{-v,--version}'[Print the version of the application]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "arrived:Mark time arrived at work"
      "completion:Generate a shell completion script"
      "entries:List time entries"
      "help:Help about any command"
      "log:Log a time entry"
      "projects:List projects"
      "set:Set config of time"
      "tasks:List tasks of a project"
      "timers:List timers"
      "upgrade:Upgrade harvest cli"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  arrived)
    _harvest_arrived
    ;;
  completion)
    _harvest_completion
    ;;
  entries)
    _harvest_entries
    ;;
  help)
    _harvest_help
    ;;
  log)
    _harvest_log
    ;;
  projects)
    _harvest_projects
    ;;
  set)
    _harvest_set
    ;;
  tasks)
    _harvest_tasks
    ;;
  timers)
    _harvest_timers
    ;;
  upgrade)
    _harvest_upgrade
    ;;
  esac
}


function _harvest_arrived {
  local -a commands

  _arguments -C \
    '(-c --clear)'{-c,--clear}'[Clear the current arrived time]' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "show:Show the time arrived at work"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  show)
    _harvest_arrived_show
    ;;
  esac
}

function _harvest_arrived_show {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}

function _harvest_completion {
  _arguments \
    '(-h --help)'{-h,--help}'[help for completion]' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    '1: :("bash" "zsh" "PowerShell")'
}


function _harvest_entries {
  local -a commands

  _arguments -C \
    '--from[Date by which to filter by entries on or after [see date section in root]]:' \
    '(-p --project)'{-p,--project}'[Project ID/alias by which to filter]:' \
    '(-t --task)'{-t,--task}'[Task ID/alias by which to filter]:' \
    '--to[Date by which to filter by entries on or before [see date section in root]]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "delete:Delete time entry"
      "show:Show a time entry"
      "update:Update time entry"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  delete)
    _harvest_entries_delete
    ;;
  show)
    _harvest_entries_show
    ;;
  update)
    _harvest_entries_update
    ;;
  esac
}

function _harvest_entries_delete {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}

function _harvest_entries_show {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}

function _harvest_entries_update {
  _arguments \
    '--append-hours[Append hours instead of replacing]' \
    '--append-notes[Append notes instead of replacing]' \
    '--clear-notes[Set the notes to empty]' \
    '(-c --confirm)'{-c,--confirm}'[Confirm all fields before updating]' \
    '(-d --date)'{-d,--date}'[Date to update entry'\''s to (see root'\''s DATES section)]:' \
    '(-H --hours)'{-H,--hours}'[Duration to update entry'\''s to (or append)]:' \
    '--last[Update last time entry]' \
    '(-l --last-of)'{-l,--last-of}'[Update last time entry of given task]:' \
    '(-n --notes)'{-n,--notes}'[Message to update entry'\''s notes to (or append)]:' \
    '(-p --project)'{-p,--project}'[Project to move entry to]:' \
    '--select-task[Select project/task to update to]' \
    '(-t --task)'{-t,--task}'[Task to move entry to]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}

function _harvest_help {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}

function _harvest_log {
  _arguments \
    '(-c --confirm)'{-c,--confirm}'[Confirm all the values before logging]' \
    '(-d --date)'{-d,--date}'[Set the date for the entry]:' \
    '(-H --hours)'{-H,--hours}'[Set the duration for the entry]:' \
    '(-n --notes)'{-n,--notes}'[Add notes to the time entry]:' \
    '(-p --project)'{-p,--project}'[Set project (see root'\''s ALIASES section)]:' \
    '(-t --task)'{-t,--task}'[Set the task (see root'\''s ALIASES section)]:' \
    '(-T --timer)'{-T,--timer}'[Get data from timer while creating record]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}


function _harvest_projects {
  local -a commands

  _arguments -C \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "alias:Alias a project ID"
      "aliases:List project aliases"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  alias)
    _harvest_projects_alias
    ;;
  aliases)
    _harvest_projects_aliases
    ;;
  esac
}


function _harvest_set_project_alias {
  local -a commands

  _arguments -C \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "delete:Delete a project ID alias"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  delete)
    _harvest_set_project_alias_delete
    ;;
  esac
}

function _harvest_set_project_alias_delete {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}

function _harvest_projects_aliases {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}


function _harvest_set {
  local -a commands

  _arguments -C \
    '--default-output-format[Default output format [json, simple, table]]:' \
    '--harvest-access-token[Harvest API Access token]:' \
    '--harvest-account-id[Harvest API account ID]:' \
    '--time-format[Default time delta format [decimal, human]]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "project:Set project stuff"
      "task:Set task stuff"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  project)
    _harvest_set_project
    ;;
  task)
    _harvest_set_task
    ;;
  esac
}


function _harvest_set_project {
  local -a commands

  _arguments -C \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "alias:Alias a project ID"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  alias)
    _harvest_set_project_alias
    ;;
  esac
}


function _harvest_set_project_alias {
  local -a commands

  _arguments -C \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "delete:Delete a project ID alias"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  delete)
    _harvest_set_project_alias_delete
    ;;
  esac
}

function _harvest_set_project_alias_delete {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}


function _harvest_set_task {
  local -a commands

  _arguments -C \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "alias:Alias a task ID"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  alias)
    _harvest_set_task_alias
    ;;
  esac
}


function _harvest_tasks_alias {
  local -a commands

  _arguments -C \
    '(-H --default-hours)'{-H,--default-hours}'[Default duration to use when logging time]:' \
    '(-n --default-notes)'{-n,--default-notes}'[Default notes to use when logging time]:' \
    '(-p --project)'{-p,--project}'[project ID/alias the task is for]:' \
    '(-t --task)'{-t,--task}'[Task ID the task is for]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "delete:Delete a task ID alias"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  delete)
    _harvest_tasks_alias_delete
    ;;
  esac
}

function _harvest_tasks_alias_delete {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}


function _harvest_tasks {
  local -a commands

  _arguments -C \
    '(-A --all)'{-A,--all}'[Show tasks from all projects]' \
    '(-p --project)'{-p,--project}'[Project ID or alias]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "alias:Alias a task ID"
      "aliases:List task aliases"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  alias)
    _harvest_tasks_alias
    ;;
  aliases)
    _harvest_tasks_aliases
    ;;
  esac
}


function _harvest_tasks_alias {
  local -a commands

  _arguments -C \
    '(-H --default-hours)'{-H,--default-hours}'[Default duration to use when logging time]:' \
    '(-n --default-notes)'{-n,--default-notes}'[Default notes to use when logging time]:' \
    '(-p --project)'{-p,--project}'[project ID/alias the task is for]:' \
    '(-t --task)'{-t,--task}'[Task ID the task is for]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "delete:Delete a task ID alias"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  delete)
    _harvest_tasks_alias_delete
    ;;
  esac
}

function _harvest_tasks_alias_delete {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}

function _harvest_tasks_aliases {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}


function _harvest_timers {
  local -a commands

  _arguments -C \
    '--do-not-sync[Prevent syncing with harvest timers]' \
    '(-l --just-names)'{-l,--just-names}'[Just print the timer names]' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "delete:Delete a timer"
      "move:Move a timer"
      "set:Set/alter values of a timer"
      "start:Start a timer"
      "stop:Stop a timer"
      "switch:Switch a timer"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  delete)
    _harvest_timers_delete
    ;;
  move)
    _harvest_timers_move
    ;;
  set)
    _harvest_timers_set
    ;;
  start)
    _harvest_timers_start
    ;;
  stop)
    _harvest_timers_stop
    ;;
  switch)
    _harvest_timers_switch
    ;;
  esac
}

function _harvest_timers_delete {
  _arguments \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '--do-not-sync[Prevent syncing with harvest timers]' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    '(-l --just-names)'{-l,--just-names}'[Just print the timer names]'
}

function _harvest_timers_move {
  _arguments \
    '(-H --hours)'{-H,--hours}'[Amount of duration to move (default all)]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '--do-not-sync[Prevent syncing with harvest timers]' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    '(-l --just-names)'{-l,--just-names}'[Just print the timer names]'
}

function _harvest_timers_set {
  _arguments \
    '(-a --add)'{-a,--add}'[Add a duration (or negative duration) to the timer]:' \
    '(-e --entry)'{-e,--entry}'[Associate timer with a time entry and sync the timer with harvest]:' \
    '(-H --hours)'{-H,--hours}'[Set the duration of the timer]:' \
    '(-n --notes)'{-n,--notes}'[Append notes to the timer]:' \
    '(-t --task)'{-t,--task}'[Associate timer with a task and sync the timer with harvest]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '--do-not-sync[Prevent syncing with harvest timers]' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    '(-l --just-names)'{-l,--just-names}'[Just print the timer names]'
}

function _harvest_timers_start {
  _arguments \
    '(-e --entry)'{-e,--entry}'[Associate timer with a time entry and sync the timer with harvest]:' \
    '(-H --hours)'{-H,--hours}'[Start the timer with the given hours already clocked (or appended)]:' \
    '(-n --notes)'{-n,--notes}'[Append notes to the timer]:' \
    '(-t --task)'{-t,--task}'[Associate timer with a task and sync the timer with harvest]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '--do-not-sync[Prevent syncing with harvest timers]' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    '(-l --just-names)'{-l,--just-names}'[Just print the timer names]'
}

function _harvest_timers_stop {
  _arguments \
    '(-H --hours)'{-H,--hours}'[Stop the timer with the given hours appended]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '--do-not-sync[Prevent syncing with harvest timers]' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    '(-l --just-names)'{-l,--just-names}'[Just print the timer names]'
}

function _harvest_timers_switch {
  _arguments \
    '(-e --entry)'{-e,--entry}'[Associate timer with a time entry and sync the timer with harvest]:' \
    '(-H --hours)'{-H,--hours}'[Start/stop the timer with the given hours appended]:' \
    '(-n --notes)'{-n,--notes}'[Append notes to the timer]:' \
    '(-t --task)'{-t,--task}'[Associate timer with a task and sync the timer with harvest]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '--do-not-sync[Prevent syncing with harvest timers]' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:' \
    '(-l --just-names)'{-l,--just-names}'[Just print the timer names]'
}

function _harvest_upgrade {
  _arguments \
    '--download-only[Just download the new binary in the current directory with the given name]:' \
    '--config[config file (default is $HOME/.harvest.yaml)]:' \
    '(-f --format)'{-f,--format}'[Format of output [json, simple, table]]:'
}

